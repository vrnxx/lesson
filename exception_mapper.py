from exceptions import (
    UserNotFound,
    NotAuthenticated,
)


class ExceptionMapper:
    def __init__(self, handlers: dict):
        # –û–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å: {ExceptionType: handler_function}
        self.handlers = handlers

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                for exc_type, handler in self.handlers.items():  # items = (key, value)
                    # exceptions = {
                    #     UserNotFound: handle_user_not_found,
                    #     NotAuthenticated: handle_auth_error,
                    # }
                    if isinstance(e, exc_type):
                        print(f"[ExceptionMapper] –û–±—Ä–∞–±–æ—Ç–∫–∞ {exc_type.__name__} —á–µ—Ä–µ–∑ {handler.__name__}")
                        return handler(e, *args, **kwargs)
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise

        return wrapper


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def handle_user_not_found(exc, *args, **kwargs):
    print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return {"error": str(exc), "code": 404}


def handle_auth_error(exc, *args, **kwargs):
    print("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
    return {"error": str(exc), "code": 401}


def handle_no_money_error(exc, *args, **kwargs):
    ...


# raise NoMoneyError

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@ExceptionMapper({
    UserNotFound: handle_user_not_found,
    NotAuthenticated: handle_auth_error,
    # NoMoneyError: handle_no_money_error,  # {"message": "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"} status_code 400
})
def get_user(user_id):
    if user_id == 1:
        return {"id": 1, "name": "Alice"}
    elif user_id == 2:
        raise NotAuthenticated("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
    else:
        raise UserNotFound("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


def get_user_without_decorator(user_id):
    try:
        if user_id == 1:
            return {"id": 1, "name": "Alice"}
        elif user_id == 2:
            raise NotAuthenticated("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
        else:
            raise UserNotFound("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ–≥–æ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é
    except NotAuthenticated as e:
        print("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        return {"error": str(e), "code": 401}

    except UserNotFound as e:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {"error": str(e), "code": 404}

    # except NoMoneyError as e:
    #     print({"message": "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"})
    #     return {"message": "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}


print(get_user(1))  # ‚úÖ OK
print(get_user(2))  # üîê NotAuthenticated - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
print(get_user(3))  # ‚ùå UserNotFound
